/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Presentacion;

import Negocios.CompresorDeTexto;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ASUS
 */
public class Form extends javax.swing.JFrame {

    CompresorDeTexto compresor = new CompresorDeTexto();

    /**
     * Creates new form Form
     */
    public Form() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaDeTexto = new javax.swing.JTextArea();
        botonGuardarTxt = new javax.swing.JButton();
        botonAbrirTxt = new javax.swing.JButton();
        botonComprimirYGuardar = new javax.swing.JButton();
        botonAbrirYDescomprimir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compresor de texto");

        areaDeTexto.setColumns(20);
        areaDeTexto.setRows(5);
        areaDeTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                soloTxtSpaceLF(evt);
            }
        });
        jScrollPane1.setViewportView(areaDeTexto);

        botonGuardarTxt.setText("Guardar Archivo de Texto");
        botonGuardarTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoDeTexto(evt);
            }
        });

        botonAbrirTxt.setText("Abrir archivo de Texto");
        botonAbrirTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoDeTexto(evt);
            }
        });

        botonComprimirYGuardar.setText("Comprimir y guardar");
        botonComprimirYGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprimirYGuardar(evt);
            }
        });

        botonAbrirYDescomprimir.setText("Abrir archivo compreso");
        botonAbrirYDescomprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirYMostrarArchivoCompreso(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Opciones de Texto :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Opciones de compresión :");

        jButton1.setText("AR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoCompresoRapido(evt);
            }
        });

        jButton2.setText("GR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compresionYGuardadoRapido(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(botonAbrirYDescomprimir))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(botonAbrirTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonGuardarTxt)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonComprimirYGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonGuardarTxt)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(botonComprimirYGuardar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(botonAbrirYDescomprimir)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(botonAbrirTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarArchivoDeTexto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoDeTexto
        // TODO add your handling code here:
        byte datos[] = areaDeTexto.getText().getBytes();
        try {
            String ruta = JOptionPane.showInputDialog("Introduzca el nombre del archivo (ingrese .txt al final de nombre)",
                    "archivoDeTexto.txt");
            if (ruta != null) {
                FileOutputStream salida = new FileOutputStream(ruta);
                salida.write(datos);
                JOptionPane.showMessageDialog(rootPane, "Se guardaron los datos correctamente", "Se completó la acción", 1);
                areaDeTexto.setText("");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Acción cancelada por el usuario", "Se canceló la acción", 1);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarArchivoDeTexto

    private void abrirArchivoDeTexto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoDeTexto
        try {
            // TODO add your handling code here:
            JFileChooser selectorDeArchivo = new JFileChooser(".");
            int valorDeRetorno = selectorDeArchivo.showOpenDialog(selectorDeArchivo);
            if (valorDeRetorno == JFileChooser.APPROVE_OPTION) {
                String ruta = selectorDeArchivo.getSelectedFile().getAbsolutePath();
                FileInputStream entrada = new FileInputStream(ruta); // Abre el archivo de texto
                int content; // Entero que se usará para almacenar los bytes de nuestra entrada (archivoDeTexto.txt)
                String cadena = ""; // Cadena para almacenar el texto del archivo
                while ((content = entrada.read()) != -1) {  //Lee byte a byte y lo almacena en el entero hasta llegar al final ( devuelve -1 si se llego al final)
                    cadena += ((char) content);  // Convierte el dato del Entero (content) a char y lo suma a la cadena
                }
                areaDeTexto.setText(cadena); // Se guarda la cadena en el area de Texto de nuestro Form para así hacerlo visible
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirArchivoDeTexto

    private void comprimirYGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprimirYGuardar
        try {
            // TODO add your handling code here:
            String ruta = JOptionPane.showInputDialog("Escriba la ruta (ingrese .txt al final)",
                    "archivoCompreso.txt");
            if (ruta != null) {
                compresor.comprimirYGuardar(areaDeTexto.getText(), ruta);
                JOptionPane.showMessageDialog(rootPane, "Se comprimió y guardo el archivo correctamente", "Se completó la acción", 1);
                areaDeTexto.setText("");
            } else {
                JOptionPane.showMessageDialog(rootPane, "Acción cancelada por el usuario", "Se canceló la acción", 1);
            }
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_comprimirYGuardar

    private void abrirYMostrarArchivoCompreso(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirYMostrarArchivoCompreso
        try {
            // TODO add your handling code here:
            JFileChooser selectorDeArchivo = new JFileChooser(".");
            int valorDeRetorno = selectorDeArchivo.showOpenDialog(selectorDeArchivo);
            if (valorDeRetorno == JFileChooser.APPROVE_OPTION) {
                String ruta = selectorDeArchivo.getSelectedFile().getAbsolutePath();
                compresor.abrirArchivoCompreso(ruta);
                areaDeTexto.setText(compresor.descomprimirTexto());
            }
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirYMostrarArchivoCompreso

    private void soloTxtSpaceLF(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_soloTxtSpaceLF
        // TODO add your handling code here:
        Character a = evt.getKeyChar();
        if (a != 10 && a != 32 && a != 8 && a < 65 || a > 90 && a < 97 || a > 122) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_soloTxtSpaceLF

    private void compresionYGuardadoRapido(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compresionYGuardadoRapido
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            compresor.comprimirYGuardar(areaDeTexto.getText());
            JOptionPane.showMessageDialog(rootPane, "Se comprimió y guardo el archivo correctamente", "Se completó la acción", 1);
            areaDeTexto.setText("");
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_compresionYGuardadoRapido

    private void abrirArchivoCompresoRapido(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoCompresoRapido
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            compresor.abrirArchivoCompreso();
            areaDeTexto.setText(compresor.descomprimirTexto());
        } catch (IOException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirArchivoCompresoRapido

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaDeTexto;
    private javax.swing.JButton botonAbrirTxt;
    private javax.swing.JButton botonAbrirYDescomprimir;
    private javax.swing.JButton botonComprimirYGuardar;
    private javax.swing.JButton botonGuardarTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
